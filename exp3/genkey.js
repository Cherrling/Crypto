function gcd(a, b) {
    if (b === 0n) {
        return a;
    } else {
        return gcd(b, a % b);
    }
}

function modInverse(a, m) {
    let m0 = m, t, q;
    let x0 = 0n, x1 = 1n;

    if (m === 1n) {
        return 0n;
    }

    while (a > 1n) {
        // q 是商，t 是余数
        q = a / m;
        t = m;

        // 使用辗转相除法计算下一次的余数
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0n) {
        x1 += m0;
    }

    return x1;
}

function calculateRSAParameters(p, q, e) {
    const n = p * q; // 计算 n
    const phi = (p - 1n) * (q - 1n); // 计算 φ(n)

    // 计算 e 的模反演
    const d = modInverse(e, phi);

    // 计算 d mod (p-1) 和 d mod (q-1)
    const dModPMinus1 = d % (p - 1n);
    const dModQMinus1 = d % (q - 1n);

    // 计算 q-1 mod p
    const qMinus1ModP = modInverse(q,p);

    return { n, d, e, dModPMinus1, dModQMinus1, qMinus1ModP };
}

// 输入参数
const p = 26627466049142782101189461574085020996235089156991135799522067647594275206527359658599180991364006790412470178983959891166450396562210736651239193396713286992136142461550070059217212936987738288675942968812227629223275980884750849305664154083685317995658517078413156737417252300440129121261807308751775299709307288521049604030621405834040779873490914247498118977348086366949061671661649633292359659769411644172311163846383112345844023711735501538620108619130135669124180573103605584257477958903301414926536901348873911468112406031503884991837362914821473607550589146165095676280897853974555931846786448411416266568257n;
const q = 28687549478286447305146301808820842871798355347808511796763842356627593005030328848480720213117750144513421186137860559649154083515009664247554827799501024133098958404909017410028170365412343796140776819727221505068521698940404560209783113688903093022609616035265362645252705315437799400836157486001500993243670003794804588069401223165708260378509555227852581333329050238791040257668765437973719129113541232156247278324652705042833100915529598271890947796146042538417561932092028675573982547945630723568571809713726783466488292652828439877475955635530023889178260968955056364449369412700059199558943646426934407682593n;

// const p = 31518177765729290663403010315154533667310066471820536150882352253187426428247159769337479534653423738821768501345529542773928342634103326265872170108177206389414528456330175611986376442242709489900545792518147116309667540404783265952252880811482945093582072154043254087637670560024497065578691811991205720034291468011546485312464110290447442852337677201758544082252134666121558317057430879765284946151638987497632189632696466260901136009082880395233503154188421892089684949692337708651227532790549249487924345806572291605795640743410952840257681873645767819513390745479080355480421857998383133498671274254771689623513n;
// const q = 31228081429393107474561507274704265600542738839947908127871172602006351575517376477163089629958966716385768981568323503198732859203260112076326737807837839304480551464482717938445000720641960331912609673151794274982469060611550239385506555762917086451959672994083603228030150293525783304059251116128699302033650788176023836016857608350962781822536781996416270562070537788179927029515690837853666832833306484662833121172527790502589560553133726615797251656225315973013313972878173566860357351604051025661210465741817532602382196606695404526669028342131645403783017839266710361200049839548767544661001788947463593677737n;
const e = 65537n;

// 计算RSA参数
const { n, d, dModPMinus1, dModQMinus1, qMinus1ModP } = calculateRSAParameters(p, q, e);

console.log("RSA Parameters:");
console.log("n:", n.toString(16));
console.log("e:", e.toString(16));
console.log("d:", d.toString(16));
console.log("p:", p.toString(16));
console.log("q:", q.toString(16));
console.log("d % (p-1):", dModPMinus1.toString(16));
console.log("d % (q-1):", dModQMinus1.toString(16));
console.log("q-1 mod p:", qMinus1ModP.toString(16));


